class Solution {
public:
    unordered_map<int, int> infected;
    
    int dfs(int node, vector<int>& vis, vector<vector<int>>& g, int& inf){
        vis[node] = 1;
        int ct = 1;
        if(infected[node] == 1) inf++;
        
        for(int i = 0; i < g.size(); i++){
            if(i == node) continue;
            if(g[node][i] && !vis[i]){
                ct += dfs(i, vis, g, inf);
            }
        }
        return ct;
    }
    
    int minMalwareSpread(vector<vector<int>>& g, vector<int>& initial) {
        sort(initial.begin(), initial.end());
        int n = g.size();
        vector<int> vis(n, 0);
        for(int i = 0; i < initial.size(); i++) infected[initial[i]]++;
        
        
        int ans = initial[0], mx = 0;
        for(int i = 0; i < initial.size(); i++){
            int node = initial[i];
            if(!vis[node]){
                int inf = 0, ct = 0;
                ct = dfs(node, vis, g, inf);
                if(inf == 1 && ct > mx){
                    mx = ct;
                    ans = initial[i];
                }
            }
        }
        return ans;
    }
};